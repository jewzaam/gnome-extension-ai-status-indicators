# Generated by: Cursor (Claude)
# Makefile for GNOME Extension AI Status Indicators

# Default target
.DEFAULT_GOAL := help

# Colors for output
CYAN := \033[36m
GREEN := \033[32m
YELLOW := \033[33m
RED := \033[31m
RESET := \033[0m

.PHONY: help
help: ## Show this help message
	@printf "$(CYAN)GNOME Extension AI Status Indicators$(RESET)\n"
	@printf "$(CYAN)=====================================$(RESET)\n"
	@printf "\n"
	@printf "Available targets:\n"
	@printf "\n"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z0-9_-]+:.*?## / {printf "  $(GREEN)%-15s$(RESET) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@printf "\n"
	@printf "$(YELLOW)Examples:$(RESET)\n"
	@printf "  make lint          # Run ESLint code quality checks\n"
	@printf "  make test          # Run tests for all GNOME versions\n"
	@printf "  make test-gnome48  # Run tests specifically for GNOME 48\n"
	@printf "  make install       # Install the extension locally\n"

.PHONY: deps
deps: ## Install npm dependencies
	@printf "$(CYAN)Installing dependencies...$(RESET)\n"
	npm ci

.PHONY: lint
lint: deps ## Run ESLint code quality checks with auto-fix
	@printf "$(CYAN)Running linter with auto-fix...$(RESET)\n"
	npm run lint -- --fix

.PHONY: test
test: test-all ## Run tests for all supported GNOME versions (alias for test-all)

.PHONY: test-all
test-all: deps ## Run tests for all supported GNOME versions
	@printf "$(CYAN)Running tests for all GNOME versions...$(RESET)\n"
	npm run test:all-versions

.PHONY: test-gnome45
test-gnome45: deps ## Run tests specifically for GNOME Shell 45
	@printf "$(CYAN)Testing GNOME Shell 45...$(RESET)\n"
	npm run test:gnome45

.PHONY: test-gnome46
test-gnome46: deps ## Run tests specifically for GNOME Shell 46
	@printf "$(CYAN)Testing GNOME Shell 46...$(RESET)\n"
	npm run test:gnome46

.PHONY: test-gnome47
test-gnome47: deps ## Run tests specifically for GNOME Shell 47
	@printf "$(CYAN)Testing GNOME Shell 47...$(RESET)\n"
	npm run test:gnome47

.PHONY: test-gnome48
test-gnome48: deps ## Run tests specifically for GNOME Shell 48
	@printf "$(CYAN)Testing GNOME Shell 48...$(RESET)\n"
	npm run test:gnome48

.PHONY: coverage
coverage: deps ## Generate test coverage report
	@printf "$(CYAN)Generating coverage report...$(RESET)\n"
	npm run test:coverage

.PHONY: watch
watch: deps ## Run tests in watch mode for development
	@printf "$(CYAN)Starting test watcher...$(RESET)\n"
	npm run test:watch

.PHONY: install
install: ## Install the extension to local GNOME Shell extensions directory
	@printf "$(CYAN)Installing extension locally...$(RESET)\n"
	@if [ ! -f "install.sh" ]; then \
		printf "$(RED)Error: install.sh not found$(RESET)\n"; \
		exit 1; \
	fi
	chmod +x install.sh
	./install.sh

.PHONY: uninstall
uninstall: ## Uninstall the extension from local GNOME Shell extensions directory
	@printf "$(CYAN)Uninstalling extension...$(RESET)\n"
	@if [ ! -f "uninstall.sh" ]; then \
		printf "$(RED)Error: uninstall.sh not found$(RESET)\n"; \
		exit 1; \
	fi
	chmod +x uninstall.sh
	./uninstall.sh

.PHONY: validate
validate: deps ## Validate extension metadata and file consistency
	@printf "$(CYAN)Validating extension...$(RESET)\n"
	@printf "Checking UUID consistency...\n"
	@UUID_METADATA=$$(grep -o '"uuid": "[^"]*"' metadata.json | cut -d'"' -f4); \
	UUID_INSTALL=$$(grep -o 'EXTENSION_UUID="[^"]*"' install.sh | cut -d'"' -f2); \
	if [ "$$UUID_METADATA" != "$$UUID_INSTALL" ]; then \
		printf "$(RED)Error: Extension UUID mismatch between metadata.json and install.sh$(RESET)\n"; \
		exit 1; \
	fi
	@printf "Checking GNOME version support...\n"
	@for version in 45 46 47 48; do \
		if ! grep -q "\"$$version\"" metadata.json; then \
			printf "$(RED)Error: GNOME Shell version $$version missing from metadata.json$(RESET)\n"; \
			exit 1; \
		fi; \
	done
	@printf "$(GREEN)✓ Extension validation passed!$(RESET)\n"

.PHONY: clean
clean: ## Clean up generated files and dependencies
	@printf "$(CYAN)Cleaning up...$(RESET)\n"
	rm -rf node_modules
	rm -rf coverage
	rm -f package-lock.json

.PHONY: check
check: lint validate test ## Run all checks (lint, validate, test)
	@printf "$(GREEN)✓ All checks passed!$(RESET)\n"

.PHONY: ci
ci: deps lint validate test ## Run CI pipeline locally
	@printf "$(GREEN)✓ CI pipeline completed successfully!$(RESET)\n"

.PHONY: dev
dev: deps ## Set up development environment
	@printf "$(CYAN)Setting up development environment...$(RESET)\n"
	@printf "$(YELLOW)Dependencies installed$(RESET)\n"
	@printf "$(YELLOW)Ready for development!$(RESET)\n"
	@printf "\n"
	@printf "$(CYAN)Next steps:$(RESET)\n"
	@printf "  make lint          # Check code quality\n"
	@printf "  make test          # Run all tests\n"
	@printf "  make watch         # Start test watcher\n"
	@printf "  make install       # Install extension locally\n"

.PHONY: test-version
test-version: ## Test a specific GNOME version (usage: make test-version VERSION=48)
	@if [ -z "$(VERSION)" ]; then \
		printf "$(RED)Error: VERSION not specified. Usage: make test-version VERSION=48$(RESET)\n"; \
		exit 1; \
	fi
	@printf "$(CYAN)Testing GNOME Shell $(VERSION)...$(RESET)\n"
	GNOME_VERSION=$(VERSION) npm test 