#!/usr/bin/env python3
# Generated by Cursor
"""
Example client script for the Status Widget GNOME extension.

This script demonstrates how to control the extension programmatically
via D-Bus from external applications or scripts.
"""

import dbus
import time
import sys
from typing import Optional

class StatusWidgetController:
    """Controller for the Status Widget GNOME extension."""
    
    def __init__(self):
        """Initialize the D-Bus connection."""
        try:
            self.bus = dbus.SessionBus()
            self.proxy = self.bus.get_object(
                'org.gnome.Shell',
                '/org/gnome/shell/extensions/StatusWidget'
            )
            self.interface = dbus.Interface(
                self.proxy,
                'org.gnome.shell.extensions.StatusWidget'
            )
        except Exception as e:
            print(f"Error connecting to Status Widget extension: {e}")
            print("Make sure the extension is installed and enabled.")
            sys.exit(1)
    
    def add_indicator(self, indicator_id: str, name: str, 
                     ready_icon: str = "‚úÖ", working_icon: str = "‚ö†Ô∏è", waiting_icon: str = "‚õî"):
        """Add a new status indicator."""
        try:
            self.interface.AddIndicator(indicator_id, name, ready_icon, working_icon, waiting_icon)
            print(f"Added indicator: {name} ({indicator_id})")
        except Exception as e:
            print(f"Error adding indicator: {e}")
    
    def remove_indicator(self, indicator_id: str):
        """Remove a status indicator."""
        try:
            self.interface.RemoveIndicator(indicator_id)
            print(f"Removed indicator: {indicator_id}")
        except Exception as e:
            print(f"Error removing indicator: {e}")
    
    def set_status(self, indicator_id: str, status: str):
        """Set the status of an indicator."""
        try:
            self.interface.SetIndicatorStatus(indicator_id, status)
            print(f"Set {indicator_id} to {status}")
        except Exception as e:
            print(f"Error setting status: {e}")

def main():
    """Demonstrate the Status Widget functionality."""
    controller = StatusWidgetController()
    
    # Add some example indicators
    controller.add_indicator("cursor", "Cursor AI", "‚úÖ", "üîÑ", "‚õî")
    controller.add_indicator("copilot", "Copilot", "‚úÖ", "‚ö†Ô∏è", "‚õî")
    controller.add_indicator("claude", "Claude", "‚úÖ", "üí≠", "‚õî")
    
    # Simulate some work
    print("\nSimulating AI tool activity...")
    
    # Cursor starts working
    controller.set_status("cursor", "working")
    time.sleep(2)
    
    # Copilot starts working
    controller.set_status("copilot", "working")
    time.sleep(2)
    
    # Cursor waits for input
    controller.set_status("cursor", "waiting")
    time.sleep(1)
    
    # Claude starts working
    controller.set_status("claude", "working")
    time.sleep(2)
    
    # Everyone finishes
    controller.set_status("cursor", "ready")
    controller.set_status("copilot", "ready")
    controller.set_status("claude", "ready")
    
    print("\nDemo completed. Indicators will remain in the panel.")
    print("You can remove them manually through the extension preferences.")

if __name__ == "__main__":
    main() 