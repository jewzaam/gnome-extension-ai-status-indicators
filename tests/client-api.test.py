#!/usr/bin/env python3
# Generated by Cursor
"""
Tests for the StatusWidgetController client API.
Note: These tests require python-dbus to be installed.
"""

import unittest
from unittest.mock import Mock, patch, MagicMock
import sys
from io import StringIO

# Mock the dbus module since it's not available in test environment
sys.modules['dbus'] = Mock()

# Import after mocking
from example-client import StatusWidgetController


class MockDBusInterface:
    """Mock D-Bus interface for testing."""
    
    def __init__(self):
        self.calls = []
    
    def AddIndicator(self, id, name, ready_icon, working_icon, waiting_icon):
        self.calls.append(('AddIndicator', id, name, ready_icon, working_icon, waiting_icon))
    
    def RemoveIndicator(self, id):
        self.calls.append(('RemoveIndicator', id))
    
    def SetIndicatorStatus(self, id, status):
        self.calls.append(('SetIndicatorStatus', id, status))


class TestStatusWidgetController(unittest.TestCase):
    """Test cases for the StatusWidgetController class."""
    
    def setUp(self):
        """Set up test fixtures."""
        self.mock_bus = Mock()
        self.mock_proxy = Mock()
        self.mock_interface = MockDBusInterface()
        
        # Mock the D-Bus setup
        with patch('dbus.SessionBus') as mock_session_bus:
            mock_session_bus.return_value = self.mock_bus
            self.mock_bus.get_object.return_value = self.mock_proxy
            
            with patch('dbus.Interface') as mock_dbus_interface:
                mock_dbus_interface.return_value = self.mock_interface
                
                # Capture stdout for testing print statements
                self.captured_output = StringIO()
                
                with patch('sys.stdout', self.captured_output):
                    self.controller = StatusWidgetController()
    
    def test_initialization(self):
        """Test controller initialization."""
        self.assertIsNotNone(self.controller.bus)
        self.assertIsNotNone(self.controller.proxy)
        self.assertIsNotNone(self.controller.interface)
    
    def test_add_indicator_with_defaults(self):
        """Test adding an indicator with default icons."""
        self.controller.add_indicator("test-id", "Test AI")
        
        calls = self.mock_interface.calls
        self.assertEqual(len(calls), 1)
        self.assertEqual(calls[0][0], 'AddIndicator')
        self.assertEqual(calls[0][1], "test-id")
        self.assertEqual(calls[0][2], "Test AI")
        self.assertEqual(calls[0][3], "‚úÖ")  # default ready icon
        self.assertEqual(calls[0][4], "‚ö†Ô∏è")  # default working icon
        self.assertEqual(calls[0][5], "‚õî")  # default waiting icon
    
    def test_add_indicator_with_custom_icons(self):
        """Test adding an indicator with custom icons."""
        self.controller.add_indicator("test-id", "Test AI", "üü¢", "üü°", "üî¥")
        
        calls = self.mock_interface.calls
        self.assertEqual(len(calls), 1)
        self.assertEqual(calls[0][0], 'AddIndicator')
        self.assertEqual(calls[0][1], "test-id")
        self.assertEqual(calls[0][2], "Test AI")
        self.assertEqual(calls[0][3], "üü¢")
        self.assertEqual(calls[0][4], "üü°")
        self.assertEqual(calls[0][5], "üî¥")
    
    def test_remove_indicator(self):
        """Test removing an indicator."""
        self.controller.remove_indicator("test-id")
        
        calls = self.mock_interface.calls
        self.assertEqual(len(calls), 1)
        self.assertEqual(calls[0][0], 'RemoveIndicator')
        self.assertEqual(calls[0][1], "test-id")
    
    def test_set_status_ready(self):
        """Test setting indicator status to ready."""
        self.controller.set_status("test-id", "ready")
        
        calls = self.mock_interface.calls
        self.assertEqual(len(calls), 1)
        self.assertEqual(calls[0][0], 'SetIndicatorStatus')
        self.assertEqual(calls[0][1], "test-id")
        self.assertEqual(calls[0][2], "ready")
    
    def test_set_status_working(self):
        """Test setting indicator status to working."""
        self.controller.set_status("test-id", "working")
        
        calls = self.mock_interface.calls
        self.assertEqual(len(calls), 1)
        self.assertEqual(calls[0][0], 'SetIndicatorStatus')
        self.assertEqual(calls[0][1], "test-id")
        self.assertEqual(calls[0][2], "working")
    
    def test_set_status_waiting(self):
        """Test setting indicator status to waiting."""
        self.controller.set_status("test-id", "waiting")
        
        calls = self.mock_interface.calls
        self.assertEqual(len(calls), 1)
        self.assertEqual(calls[0][0], 'SetIndicatorStatus')
        self.assertEqual(calls[0][1], "test-id")
        self.assertEqual(calls[0][2], "waiting")
    
    def test_multiple_operations(self):
        """Test multiple operations in sequence."""
        self.controller.add_indicator("cursor", "Cursor AI")
        self.controller.add_indicator("copilot", "Copilot")
        self.controller.set_status("cursor", "working")
        self.controller.set_status("copilot", "waiting")
        self.controller.remove_indicator("cursor")
        
        calls = self.mock_interface.calls
        self.assertEqual(len(calls), 5)
        
        # Check the sequence of calls
        self.assertEqual(calls[0][0], 'AddIndicator')
        self.assertEqual(calls[0][1], "cursor")
        
        self.assertEqual(calls[1][0], 'AddIndicator')
        self.assertEqual(calls[1][1], "copilot")
        
        self.assertEqual(calls[2][0], 'SetIndicatorStatus')
        self.assertEqual(calls[2][1], "cursor")
        self.assertEqual(calls[2][2], "working")
        
        self.assertEqual(calls[3][0], 'SetIndicatorStatus')
        self.assertEqual(calls[3][1], "copilot")
        self.assertEqual(calls[3][2], "waiting")
        
        self.assertEqual(calls[4][0], 'RemoveIndicator')
        self.assertEqual(calls[4][1], "cursor")
    
    def test_error_handling_add_indicator(self):
        """Test error handling when adding indicator fails."""
        self.mock_interface.AddIndicator = Mock(side_effect=Exception("D-Bus error"))
        
        with patch('sys.stdout', StringIO()) as captured:
            self.controller.add_indicator("test-id", "Test AI")
            output = captured.getvalue()
            self.assertIn("Error adding indicator", output)
    
    def test_error_handling_remove_indicator(self):
        """Test error handling when removing indicator fails."""
        self.mock_interface.RemoveIndicator = Mock(side_effect=Exception("D-Bus error"))
        
        with patch('sys.stdout', StringIO()) as captured:
            self.controller.remove_indicator("test-id")
            output = captured.getvalue()
            self.assertIn("Error removing indicator", output)
    
    def test_error_handling_set_status(self):
        """Test error handling when setting status fails."""
        self.mock_interface.SetIndicatorStatus = Mock(side_effect=Exception("D-Bus error"))
        
        with patch('sys.stdout', StringIO()) as captured:
            self.controller.set_status("test-id", "working")
            output = captured.getvalue()
            self.assertIn("Error setting status", output)


class TestStatusWidgetControllerInitialization(unittest.TestCase):
    """Test cases for StatusWidgetController initialization errors."""
    
    def test_initialization_dbus_error(self):
        """Test initialization when D-Bus connection fails."""
        with patch('dbus.SessionBus', side_effect=Exception("D-Bus not available")):
            with patch('sys.exit') as mock_exit:
                with patch('sys.stdout', StringIO()) as captured:
                    try:
                        StatusWidgetController()
                    except SystemExit:
                        pass
                    
                    output = captured.getvalue()
                    self.assertIn("Error connecting to AI Status Indicators extension", output)
                    mock_exit.assert_called_with(1)
    
    def test_initialization_proxy_error(self):
        """Test initialization when getting D-Bus proxy fails."""
        mock_bus = Mock()
        mock_bus.get_object.side_effect = Exception("Proxy error")
        
        with patch('dbus.SessionBus', return_value=mock_bus):
            with patch('sys.exit') as mock_exit:
                with patch('sys.stdout', StringIO()) as captured:
                    try:
                        StatusWidgetController()
                    except SystemExit:
                        pass
                    
                    output = captured.getvalue()
                    self.assertIn("Error connecting to AI Status Indicators extension", output)
                    mock_exit.assert_called_with(1)


if __name__ == '__main__':
    # Create a test suite
    suite = unittest.TestSuite()
    
    # Add test cases
    suite.addTest(unittest.makeSuite(TestStatusWidgetController))
    suite.addTest(unittest.makeSuite(TestStatusWidgetControllerInitialization))
    
    # Run the tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # Exit with appropriate code
    sys.exit(0 if result.wasSuccessful() else 1) 