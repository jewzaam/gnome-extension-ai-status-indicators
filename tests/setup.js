// Generated by Cursor
// Mock GNOME Shell APIs for testing
global.imports = {
    gi: {
        GObject: {
            registerClass: (cls) => cls,
            TYPE_NONE: 0,
            TYPE_BOOLEAN: 1,
            TYPE_STRING: 2,
            ParamFlags: {
                READABLE: 1,
                WRITABLE: 2,
                CONSTRUCT: 4
            }
        },
        St: {
            BoxLayout: class MockBoxLayout {
                constructor(params = {}) {
                    this.style_class = params.style_class;
                    this.reactive = params.reactive;
                    this.can_focus = params.can_focus;
                    this.track_hover = params.track_hover;
                    this.vertical = params.vertical;
                    this.children = [];
                    this.visible = true;
                    this.tooltip_text = '';
                }
                
                add_child(child) {
                    this.children.push(child);
                }
                
                remove_child(child) {
                    const index = this.children.indexOf(child);
                    if (index > -1) {
                        this.children.splice(index, 1);
                    }
                }

                set_tooltip_text(text) {
                    this.tooltip_text = text;
                }

                get_tooltip_text() {
                    return this.tooltip_text;
                }
            },
            Label: class MockLabel {
                constructor(params = {}) {
                    this.text = params.text || '';
                    this.y_align = params.y_align;
                    this.style_class = params.style_class;
                }
                
                set_text(text) {
                    this.text = text;
                }
                
                get_text() {
                    return this.text;
                }
            },
            Align: {
                MIDDLE: 'middle',
                START: 'start',
                END: 'end'
            }
        },
        Gio: {
            DBusExportedObject: {
                wrapJSObject: (xml, obj) => ({
                    export: jest.fn(),
                    unexport: jest.fn()
                })
            },
            DBus: {
                session: {}
            },
            SettingsBindFlags: {
                DEFAULT: 0
            }
        },
        GLib: {
            Variant: class MockVariant {
                constructor(type, value) {
                    this.type = type;
                    this.value = value;
                }
            }
        }
    }
};

// Mock GNOME Shell UI components
global.Main = {
    panel: {
        _leftBox: {
            children: [],
            get_children() { return this.children; },
            insert_child_at_index(child, index) {
                if (index === -1) {
                    this.children.push(child);
                } else {
                    this.children.splice(index, 0, child);
                }
            },
            remove_child(child) {
                const index = this.children.indexOf(child);
                if (index > -1) {
                    this.children.splice(index, 1);
                }
            }
        },
        _centerBox: {
            children: [],
            get_children() { return this.children; },
            insert_child_at_index(child, index) {
                if (index === -1) {
                    this.children.push(child);
                } else {
                    this.children.splice(index, 0, child);
                }
            },
            remove_child(child) {
                const index = this.children.indexOf(child);
                if (index > -1) {
                    this.children.splice(index, 1);
                }
            }
        },
        _rightBox: {
            children: [],
            get_children() { return this.children; },
            insert_child_at_index(child, index) {
                if (index === -1) {
                    this.children.push(child);
                } else {
                    this.children.splice(index, 0, child);
                }
            },
            remove_child(child) {
                const index = this.children.indexOf(child);
                if (index > -1) {
                    this.children.splice(index, 1);
                }
            }
        }
    }
};

global.PanelMenu = {
    Button: class MockPanelButton {
        constructor(alignment, nameText) {
            this.alignment = alignment;
            this.nameText = nameText;
            this.children = [];
            this.visible = true;
        }
        
        add_child(child) {
            this.children.push(child);
        }
        
        destroy() {
            this.children = [];
        }
    }
};

// Mock Extension class
global.Extension = class MockExtension {
    constructor(metadata) {
        this.metadata = metadata;
        this._settingsObject = {
            _data: {
                'indicators': '[]',
                'position': 'right',
                'show-labels': false
            },
            _connections: new Map(),
            
            get_string(key) {
                return this._data[key] || '';
            },
            
            set_string(key, value) {
                this._data[key] = value;
                // Simulate signal emission
                const connections = this._connections.get(`changed::${key}`) || [];
                connections.forEach(callback => callback());
            },
            
            get_boolean(key) {
                return this._data[key] || false;
            },
            
            set_boolean(key, value) {
                this._data[key] = value;
                const connections = this._connections.get(`changed::${key}`) || [];
                connections.forEach(callback => callback());
            },
            
            connect(signal, callback) {
                if (!this._connections.has(signal)) {
                    this._connections.set(signal, []);
                }
                this._connections.get(signal).push(callback);
                return this._connections.get(signal).length - 1;
            },
            
            disconnect(id) {
                // Simple mock - doesn't actually disconnect
            }
        };
    }
    
    getSettings() {
        return this._settingsObject;
    }
};

// Mock gettext
global.gettext = (str) => str;
global._ = (str) => str;

// Mock console for cleaner test output
global.console = {
    log: jest.fn(),
    error: jest.fn(),
    warn: jest.fn()
}; 