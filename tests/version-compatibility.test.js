// Generated by: Cursor (Claude)
// Version compatibility tests for different GNOME Shell versions

const { getVersionConfig, createVersionAwareMocks, GNOME_VERSION } = require('./version-mocks');

// Override the global setup for this test
const versionMocks = createVersionAwareMocks();
Object.assign(global.imports.gi, versionMocks);

describe(`GNOME Shell ${GNOME_VERSION} Compatibility`, () => {
    const config = getVersionConfig();

    describe('Tooltip functionality', () => {
        test('should handle tooltip methods based on GNOME version', () => {
            const boxLayout = new versionMocks.St.BoxLayout();

            if (config.hasTooltipText) {
                expect(boxLayout.set_tooltip_text).toBeDefined();
                expect(typeof boxLayout.set_tooltip_text).toBe('function');

                boxLayout.set_tooltip_text('Test tooltip');
                expect(boxLayout.set_tooltip_text).toHaveBeenCalledWith('Test tooltip');
            } else {
                expect(boxLayout.set_tooltip_text).toBeUndefined();
            }
        });

        test('should support label_actor tooltip approach across all versions', () => {
            const boxLayout = new versionMocks.St.BoxLayout();
            const tooltipLabel = new versionMocks.St.Label({ text: 'Test tooltip' });

            // The label_actor approach works across all GNOME Shell versions
            expect(() => {
                boxLayout.label_actor = tooltipLabel;
            }).not.toThrow();

            expect(boxLayout.label_actor).toBe(tooltipLabel);
        });
    });

    describe('Alignment constants', () => {
        test('should use correct alignment constants for version', () => {
            if (config.alignConstants === 'Clutter.ActorAlign') {
                expect(versionMocks.Clutter.ActorAlign.CENTER).toBeDefined();
            }
            // Could add St.Align mocks for older versions
        });
    });

    describe('Extension compatibility', () => {
        test('should work without tooltip errors in all GNOME versions', () => {
            // Mock a StatusIndicator-like class using the official approach
            class TestIndicator {
                constructor() {
                    this.boxLayout = new versionMocks.St.BoxLayout();
                    this.tooltipLabel = new versionMocks.St.Label({ text: '' });
                }

                setTooltip(text) {
                    // Use official label_actor approach (works in all versions)
                    this.tooltipLabel.text = text;
                    this.boxLayout.label_actor = this.tooltipLabel;

                    // Fallback to set_tooltip_text if available (GNOME 45-47)
                    if (this.boxLayout.set_tooltip_text) {
                        this.boxLayout.set_tooltip_text(text);
                    }
                }
            }

            const indicator = new TestIndicator();

            // This should not throw regardless of GNOME version
            expect(() => {
                indicator.setTooltip('Test tooltip');
            }).not.toThrow();

            // label_actor approach should work in all versions
            expect(indicator.boxLayout.label_actor).toBe(indicator.tooltipLabel);
            expect(indicator.tooltipLabel.text).toBe('Test tooltip');

            // set_tooltip_text should work in older versions
            if (config.hasTooltipText) {
                expect(indicator.boxLayout.tooltip_text).toBe('Test tooltip');
            }
        });
    });

    describe('Version-specific features', () => {
        test('should handle Clutter.Color availability', () => {
            if (config.clutter.hasColor) {
                // In older versions, Clutter.Color should be available
                // (We'd need to mock this if testing)
            } else {
                // In GNOME 47+, Clutter.Color is removed
                // Should use Cogl.Color instead
            }
        });

        test('should handle St.ImageContent availability', () => {
            if (config.clutter.hasImageContent) {
                // GNOME 45+ should have St.ImageContent
            } else {
                // Older versions might use Clutter.Image
            }
        });
    });
});

describe('Cross-version metadata compatibility', () => {
    test('should support multiple GNOME versions in metadata', () => {
        // This would test that our metadata.json includes the right versions
        const supportedVersions = ['45', '46', '47', '48'];
        expect(supportedVersions).toContain(GNOME_VERSION);
    });
});
