// Generated by: Cursor (Claude)
// Version-specific mock configurations for different GNOME Shell versions

const GNOME_VERSION = process.env.GNOME_VERSION || '48';

const versionConfigs = {
    '45': {
        hasTooltipText: true,
        alignConstants: 'St.Align',
        clutter: {
            hasColor: true,
            hasImageContent: false
        }
    },
    '46': {
        hasTooltipText: true,
        alignConstants: 'St.Align',
        clutter: {
            hasColor: true,
            hasImageContent: false
        }
    },
    '47': {
        hasTooltipText: true,
        alignConstants: 'Clutter.ActorAlign',
        clutter: {
            hasColor: false, // Clutter.Color removed
            hasImageContent: true
        }
    },
    '48': {
        hasTooltipText: false, // set_tooltip_text removed
        alignConstants: 'Clutter.ActorAlign',
        clutter: {
            hasColor: false,
            hasImageContent: true
        }
    }
};

function getVersionConfig() {
    const config = versionConfigs[GNOME_VERSION];
    if (!config) {
        throw new Error(`Unsupported GNOME version: ${GNOME_VERSION}`);
    }
    return config;
}

function createVersionAwareMocks() {
    const config = getVersionConfig();

    return {
        St: {
            BoxLayout: class MockBoxLayout {
                constructor(params = {}) {
                    this._init(params);
                }

                _init(params = {}) {
                    this.style_class = params.style_class;
                    this.reactive = params.reactive;
                    this.can_focus = params.can_focus;
                    this.track_hover = params.track_hover;
                    this.vertical = params.vertical;
                    this.children = [];
                    this.visible = true;
                    this.tooltip_text = '';

                    // Version-specific tooltip support
                    if (config.hasTooltipText) {
                        this.set_tooltip_text = jest.fn((text) => {
                            this.tooltip_text = text;
                        });
                    }
                }

                add_child(child) {
                    this.children.push(child);
                }

                remove_child(child) {
                    const index = this.children.indexOf(child);
                    if (index > -1) {
                        this.children.splice(index, 1);
                    }
                }
            },

            Label: class MockLabel {
                constructor(params = {}) {
                    this._init(params);
                }

                _init(params = {}) {
                    this.text = params.text || '';
                    this.y_align = params.y_align;
                    this.style_class = params.style_class;
                }

                set_text(text) {
                    this.text = text;
                }

                get_text() {
                    return this.text;
                }
            }
        },

        Clutter: {
            ActorAlign: {
                CENTER: 2,
                START: 0,
                END: 1
            }
        }
    };
}

module.exports = {
    getVersionConfig,
    createVersionAwareMocks,
    GNOME_VERSION
};
